<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sesoc.global.dao.UsersDAO">

<!-- 아이디와 비밀번호를 받아서 일치하는 객체를 반환해 준다. -->
<select id="login" resultType="Users" parameterType="Users">
  	SELECT
  	id,
  	password,
  	email,
  	is_deleted
  	FROM Users
  	WHERE id = #{id}
  	AND password = #{password}
  	AND is_deleted = 'n'
</select>

<!--  아이디 중복 검사    -->
<select id="idcheck" resultType="String" parameterType="String">
	SELECT
	id
	FROM Users
	WHERE id = #{id}
</select>

<!--  아이디 중복 검사    -->
<select id="nicknamecheck" resultType="String" parameterType="String">
	SELECT
	nickname
	FROM Users
	WHERE nickname = #{nickname}
</select>

<!--  회원 가입    -->
<insert id="register" parameterType="Users">
	INSERT INTO Users 
		(
			id,
			password,
			nickname,
			email
		)
	VALUES(
		#{id},
		#{password},
		#{nickname},
		#{email}
	)
</insert>

<!--  id만 받아서 해당 User객체를 받아오는 메소드    -->
<select id="selectOne" resultType="Users" parameterType="Users">
	SELECT
	id,
	password,
	email,
	is_deleted
	FROM Users
	WHERE id = #{id}
	AND
	is_deleted = 'n'
</select>


<!--  회원 정보 수정    -->
<update id="update" parameterType="Users">
	UPDATE Users SET
	password = #{password},
	email = #{email}
	WHERE id = #{id}
	is_deleted = 'n'
</update>


<!--  회원 탈퇴 ( is_deleted = 'Y' 처리 )  -->
<update id="unregister" parameterType="Users">
	UPDATE Users SET
		is_deleted = 'Y'
	WHERE 
		id = #{id}
		and
		is_deleted = 'n'
</update>

<!-- 아이디와 비밀번호를 받아서 일치하는 객체를 반환해 준다. -->

<update id="saveLevel" parameterType="Users">
  	update users set 
  	userlevel = #{userlevel}
  	where id = #{id}
</update>
<select id="userInfo" resultType="Users" parameterType="Users">
  	select
  	id,
  	nickname,
  	email,
  	userlevel
  	from users
  	where id = #{id}
</select>
</mapper>
